package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserRateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRateAllPropertiesEquals(UserRate expected, UserRate actual) {
        assertUserRateAutoGeneratedPropertiesEquals(expected, actual);
        assertUserRateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRateAllUpdatablePropertiesEquals(UserRate expected, UserRate actual) {
        assertUserRateUpdatableFieldsEquals(expected, actual);
        assertUserRateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRateAutoGeneratedPropertiesEquals(UserRate expected, UserRate actual) {
        assertThat(actual)
            .as("Verify UserRate auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRateUpdatableFieldsEquals(UserRate expected, UserRate actual) {
        assertThat(actual)
            .as("Verify UserRate relevant properties")
            .satisfies(a -> assertThat(a.getRate()).as("check rate").isEqualTo(expected.getRate()))
            .satisfies(a -> assertThat(a.getNote()).as("check note").isEqualTo(expected.getNote()))
            .satisfies(a -> assertThat(a.getRateDate()).as("check rateDate").isEqualTo(expected.getRateDate()))
            .satisfies(a -> assertThat(a.getRatedByEncId()).as("check ratedByEncId").isEqualTo(expected.getRatedByEncId()))
            .satisfies(a -> assertThat(a.getRatedEncId()).as("check ratedEncId").isEqualTo(expected.getRatedEncId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRateUpdatableRelationshipsEquals(UserRate expected, UserRate actual) {
        // empty method
    }
}
