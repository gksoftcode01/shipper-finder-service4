package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubscribeTypeDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeDetailAllPropertiesEquals(SubscribeTypeDetail expected, SubscribeTypeDetail actual) {
        assertSubscribeTypeDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscribeTypeDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeDetailAllUpdatablePropertiesEquals(SubscribeTypeDetail expected, SubscribeTypeDetail actual) {
        assertSubscribeTypeDetailUpdatableFieldsEquals(expected, actual);
        assertSubscribeTypeDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeDetailAutoGeneratedPropertiesEquals(SubscribeTypeDetail expected, SubscribeTypeDetail actual) {
        assertThat(actual)
            .as("Verify SubscribeTypeDetail auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeDetailUpdatableFieldsEquals(SubscribeTypeDetail expected, SubscribeTypeDetail actual) {
        assertThat(actual)
            .as("Verify SubscribeTypeDetail relevant properties")
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getMaxTrip()).as("check maxTrip").isEqualTo(expected.getMaxTrip()))
            .satisfies(a -> assertThat(a.getMaxItems()).as("check maxItems").isEqualTo(expected.getMaxItems()))
            .satisfies(a -> assertThat(a.getMaxRequest()).as("check maxRequest").isEqualTo(expected.getMaxRequest()))
            .satisfies(a -> assertThat(a.getMaxNumberView()).as("check maxNumberView").isEqualTo(expected.getMaxNumberView()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeDetailUpdatableRelationshipsEquals(SubscribeTypeDetail expected, SubscribeTypeDetail actual) {
        assertThat(actual)
            .as("Verify SubscribeTypeDetail relationships")
            .satisfies(a -> assertThat(a.getSubscribeType()).as("check subscribeType").isEqualTo(expected.getSubscribeType()));
    }
}
