package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TripItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripItemAllPropertiesEquals(TripItem expected, TripItem actual) {
        assertTripItemAutoGeneratedPropertiesEquals(expected, actual);
        assertTripItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripItemAllUpdatablePropertiesEquals(TripItem expected, TripItem actual) {
        assertTripItemUpdatableFieldsEquals(expected, actual);
        assertTripItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripItemAutoGeneratedPropertiesEquals(TripItem expected, TripItem actual) {
        assertThat(actual)
            .as("Verify TripItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripItemUpdatableFieldsEquals(TripItem expected, TripItem actual) {
        assertThat(actual)
            .as("Verify TripItem relevant properties")
            .satisfies(a -> assertThat(a.getItemPrice()).as("check itemPrice").isEqualTo(expected.getItemPrice()))
            .satisfies(a -> assertThat(a.getMaxQty()).as("check maxQty").isEqualTo(expected.getMaxQty()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripItemUpdatableRelationshipsEquals(TripItem expected, TripItem actual) {
        assertThat(actual)
            .as("Verify TripItem relationships")
            .satisfies(a -> assertThat(a.getItem()).as("check item").isEqualTo(expected.getItem()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getTags()).as("check tags").isEqualTo(expected.getTags()))
            .satisfies(a -> assertThat(a.getTrip()).as("check trip").isEqualTo(expected.getTrip()));
    }
}
