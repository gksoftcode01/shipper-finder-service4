package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportAbuseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAbuseAllPropertiesEquals(ReportAbuse expected, ReportAbuse actual) {
        assertReportAbuseAutoGeneratedPropertiesEquals(expected, actual);
        assertReportAbuseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAbuseAllUpdatablePropertiesEquals(ReportAbuse expected, ReportAbuse actual) {
        assertReportAbuseUpdatableFieldsEquals(expected, actual);
        assertReportAbuseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAbuseAutoGeneratedPropertiesEquals(ReportAbuse expected, ReportAbuse actual) {
        assertThat(actual)
            .as("Verify ReportAbuse auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAbuseUpdatableFieldsEquals(ReportAbuse expected, ReportAbuse actual) {
        assertThat(actual)
            .as("Verify ReportAbuse relevant properties")
            .satisfies(a -> assertThat(a.getReportByEncId()).as("check reportByEncId").isEqualTo(expected.getReportByEncId()))
            .satisfies(a ->
                assertThat(a.getReportedAgainstEncId()).as("check reportedAgainstEncId").isEqualTo(expected.getReportedAgainstEncId())
            )
            .satisfies(a -> assertThat(a.getReportDate()).as("check reportDate").isEqualTo(expected.getReportDate()))
            .satisfies(a -> assertThat(a.getReportData()).as("check reportData").isEqualTo(expected.getReportData()))
            .satisfies(a -> assertThat(a.getReportStatus()).as("check reportStatus").isEqualTo(expected.getReportStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAbuseUpdatableRelationshipsEquals(ReportAbuse expected, ReportAbuse actual) {
        // empty method
    }
}
