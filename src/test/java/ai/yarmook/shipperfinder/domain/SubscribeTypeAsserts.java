package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubscribeTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeAllPropertiesEquals(SubscribeType expected, SubscribeType actual) {
        assertSubscribeTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscribeTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeAllUpdatablePropertiesEquals(SubscribeType expected, SubscribeType actual) {
        assertSubscribeTypeUpdatableFieldsEquals(expected, actual);
        assertSubscribeTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeAutoGeneratedPropertiesEquals(SubscribeType expected, SubscribeType actual) {
        assertThat(actual)
            .as("Verify SubscribeType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeUpdatableFieldsEquals(SubscribeType expected, SubscribeType actual) {
        assertThat(actual)
            .as("Verify SubscribeType relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getNameAr()).as("check nameAr").isEqualTo(expected.getNameAr()))
            .satisfies(a -> assertThat(a.getNameFr()).as("check nameFr").isEqualTo(expected.getNameFr()))
            .satisfies(a -> assertThat(a.getNameDe()).as("check nameDe").isEqualTo(expected.getNameDe()))
            .satisfies(a -> assertThat(a.getNameUrdu()).as("check nameUrdu").isEqualTo(expected.getNameUrdu()))
            .satisfies(a -> assertThat(a.getDetails()).as("check details").isEqualTo(expected.getDetails()))
            .satisfies(a -> assertThat(a.getDetailsEn()).as("check detailsEn").isEqualTo(expected.getDetailsEn()))
            .satisfies(a -> assertThat(a.getDetailsAr()).as("check detailsAr").isEqualTo(expected.getDetailsAr()))
            .satisfies(a -> assertThat(a.getDetailsFr()).as("check detailsFr").isEqualTo(expected.getDetailsFr()))
            .satisfies(a -> assertThat(a.getDetailsDe()).as("check detailsDe").isEqualTo(expected.getDetailsDe()))
            .satisfies(a -> assertThat(a.getDetailsUrdu()).as("check detailsUrdu").isEqualTo(expected.getDetailsUrdu()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribeTypeUpdatableRelationshipsEquals(SubscribeType expected, SubscribeType actual) {
        // empty method
    }
}
