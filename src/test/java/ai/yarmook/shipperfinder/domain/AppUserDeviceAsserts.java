package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppUserDeviceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserDeviceAllPropertiesEquals(AppUserDevice expected, AppUserDevice actual) {
        assertAppUserDeviceAutoGeneratedPropertiesEquals(expected, actual);
        assertAppUserDeviceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserDeviceAllUpdatablePropertiesEquals(AppUserDevice expected, AppUserDevice actual) {
        assertAppUserDeviceUpdatableFieldsEquals(expected, actual);
        assertAppUserDeviceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserDeviceAutoGeneratedPropertiesEquals(AppUserDevice expected, AppUserDevice actual) {
        assertThat(actual)
            .as("Verify AppUserDevice auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserDeviceUpdatableFieldsEquals(AppUserDevice expected, AppUserDevice actual) {
        assertThat(actual)
            .as("Verify AppUserDevice relevant properties")
            .satisfies(a -> assertThat(a.getDeviceCode()).as("check deviceCode").isEqualTo(expected.getDeviceCode()))
            .satisfies(a -> assertThat(a.getNotificationToken()).as("check notificationToken").isEqualTo(expected.getNotificationToken()))
            .satisfies(a -> assertThat(a.getLastLogin()).as("check lastLogin").isEqualTo(expected.getLastLogin()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getUserEncId()).as("check userEncId").isEqualTo(expected.getUserEncId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserDeviceUpdatableRelationshipsEquals(AppUserDevice expected, AppUserDevice actual) {
        // empty method
    }
}
