package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemAllPropertiesEquals(Item expected, Item actual) {
        assertItemAutoGeneratedPropertiesEquals(expected, actual);
        assertItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemAllUpdatablePropertiesEquals(Item expected, Item actual) {
        assertItemUpdatableFieldsEquals(expected, actual);
        assertItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemAutoGeneratedPropertiesEquals(Item expected, Item actual) {
        assertThat(actual)
            .as("Verify Item auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemUpdatableFieldsEquals(Item expected, Item actual) {
        assertThat(actual)
            .as("Verify Item relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getNameAr()).as("check nameAr").isEqualTo(expected.getNameAr()))
            .satisfies(a -> assertThat(a.getNameFr()).as("check nameFr").isEqualTo(expected.getNameFr()))
            .satisfies(a -> assertThat(a.getNameDe()).as("check nameDe").isEqualTo(expected.getNameDe()))
            .satisfies(a -> assertThat(a.getNameUrdu()).as("check nameUrdu").isEqualTo(expected.getNameUrdu()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getDefaultUOM()).as("check defaultUOM").isEqualTo(expected.getDefaultUOM()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemUpdatableRelationshipsEquals(Item expected, Item actual) {
        assertThat(actual)
            .as("Verify Item relationships")
            .satisfies(a -> assertThat(a.getItemType()).as("check itemType").isEqualTo(expected.getItemType()));
    }
}
