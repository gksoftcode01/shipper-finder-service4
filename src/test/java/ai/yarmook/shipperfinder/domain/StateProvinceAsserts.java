package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StateProvinceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStateProvinceAllPropertiesEquals(StateProvince expected, StateProvince actual) {
        assertStateProvinceAutoGeneratedPropertiesEquals(expected, actual);
        assertStateProvinceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStateProvinceAllUpdatablePropertiesEquals(StateProvince expected, StateProvince actual) {
        assertStateProvinceUpdatableFieldsEquals(expected, actual);
        assertStateProvinceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStateProvinceAutoGeneratedPropertiesEquals(StateProvince expected, StateProvince actual) {
        assertThat(actual)
            .as("Verify StateProvince auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStateProvinceUpdatableFieldsEquals(StateProvince expected, StateProvince actual) {
        assertThat(actual)
            .as("Verify StateProvince relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLocalName()).as("check localName").isEqualTo(expected.getLocalName()))
            .satisfies(a -> assertThat(a.getIsoCode()).as("check isoCode").isEqualTo(expected.getIsoCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStateProvinceUpdatableRelationshipsEquals(StateProvince expected, StateProvince actual) {
        assertThat(actual)
            .as("Verify StateProvince relationships")
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()));
    }
}
