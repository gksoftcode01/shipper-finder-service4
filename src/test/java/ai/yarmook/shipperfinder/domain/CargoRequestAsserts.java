package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CargoRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCargoRequestAllPropertiesEquals(CargoRequest expected, CargoRequest actual) {
        assertCargoRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertCargoRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCargoRequestAllUpdatablePropertiesEquals(CargoRequest expected, CargoRequest actual) {
        assertCargoRequestUpdatableFieldsEquals(expected, actual);
        assertCargoRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCargoRequestAutoGeneratedPropertiesEquals(CargoRequest expected, CargoRequest actual) {
        assertThat(actual)
            .as("Verify CargoRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCargoRequestUpdatableFieldsEquals(CargoRequest expected, CargoRequest actual) {
        assertThat(actual)
            .as("Verify CargoRequest relevant properties")
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getValidUntil()).as("check validUntil").isEqualTo(expected.getValidUntil()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getIsNegotiable()).as("check isNegotiable").isEqualTo(expected.getIsNegotiable()))
            .satisfies(a -> assertThat(a.getBudget()).as("check budget").isEqualTo(expected.getBudget()))
            .satisfies(a -> assertThat(a.getCreatedByEncId()).as("check createdByEncId").isEqualTo(expected.getCreatedByEncId()))
            .satisfies(a -> assertThat(a.getTakenByEncId()).as("check takenByEncId").isEqualTo(expected.getTakenByEncId()))
            .satisfies(a -> assertThat(a.getEncId()).as("check encId").isEqualTo(expected.getEncId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCargoRequestUpdatableRelationshipsEquals(CargoRequest expected, CargoRequest actual) {
        assertThat(actual)
            .as("Verify CargoRequest relationships")
            .satisfies(a -> assertThat(a.getFromCountry()).as("check fromCountry").isEqualTo(expected.getFromCountry()))
            .satisfies(a -> assertThat(a.getToCountry()).as("check toCountry").isEqualTo(expected.getToCountry()))
            .satisfies(a -> assertThat(a.getFromState()).as("check fromState").isEqualTo(expected.getFromState()))
            .satisfies(a -> assertThat(a.getToState()).as("check toState").isEqualTo(expected.getToState()));
    }
}
