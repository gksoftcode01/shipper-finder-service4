package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserSubscribeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscribeAllPropertiesEquals(UserSubscribe expected, UserSubscribe actual) {
        assertUserSubscribeAutoGeneratedPropertiesEquals(expected, actual);
        assertUserSubscribeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscribeAllUpdatablePropertiesEquals(UserSubscribe expected, UserSubscribe actual) {
        assertUserSubscribeUpdatableFieldsEquals(expected, actual);
        assertUserSubscribeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscribeAutoGeneratedPropertiesEquals(UserSubscribe expected, UserSubscribe actual) {
        assertThat(actual)
            .as("Verify UserSubscribe auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscribeUpdatableFieldsEquals(UserSubscribe expected, UserSubscribe actual) {
        assertThat(actual)
            .as("Verify UserSubscribe relevant properties")
            .satisfies(a -> assertThat(a.getFromDate()).as("check fromDate").isEqualTo(expected.getFromDate()))
            .satisfies(a -> assertThat(a.getToDate()).as("check toDate").isEqualTo(expected.getToDate()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a ->
                assertThat(a.getSubscribedUserEncId()).as("check subscribedUserEncId").isEqualTo(expected.getSubscribedUserEncId())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscribeUpdatableRelationshipsEquals(UserSubscribe expected, UserSubscribe actual) {
        assertThat(actual)
            .as("Verify UserSubscribe relationships")
            .satisfies(a -> assertThat(a.getSubscribeType()).as("check subscribeType").isEqualTo(expected.getSubscribeType()));
    }
}
