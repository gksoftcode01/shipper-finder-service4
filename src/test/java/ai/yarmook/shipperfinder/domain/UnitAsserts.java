package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UnitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAllPropertiesEquals(Unit expected, Unit actual) {
        assertUnitAutoGeneratedPropertiesEquals(expected, actual);
        assertUnitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAllUpdatablePropertiesEquals(Unit expected, Unit actual) {
        assertUnitUpdatableFieldsEquals(expected, actual);
        assertUnitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAutoGeneratedPropertiesEquals(Unit expected, Unit actual) {
        assertThat(actual)
            .as("Verify Unit auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitUpdatableFieldsEquals(Unit expected, Unit actual) {
        assertThat(actual)
            .as("Verify Unit relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getNameAr()).as("check nameAr").isEqualTo(expected.getNameAr()))
            .satisfies(a -> assertThat(a.getNameFr()).as("check nameFr").isEqualTo(expected.getNameFr()))
            .satisfies(a -> assertThat(a.getNameDe()).as("check nameDe").isEqualTo(expected.getNameDe()))
            .satisfies(a -> assertThat(a.getNameUrdu()).as("check nameUrdu").isEqualTo(expected.getNameUrdu()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitUpdatableRelationshipsEquals(Unit expected, Unit actual) {
        // empty method
    }
}
