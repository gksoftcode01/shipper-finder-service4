package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CountryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCountryAllPropertiesEquals(Country expected, Country actual) {
        assertCountryAutoGeneratedPropertiesEquals(expected, actual);
        assertCountryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCountryAllUpdatablePropertiesEquals(Country expected, Country actual) {
        assertCountryUpdatableFieldsEquals(expected, actual);
        assertCountryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCountryAutoGeneratedPropertiesEquals(Country expected, Country actual) {
        assertThat(actual)
            .as("Verify Country auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCountryUpdatableFieldsEquals(Country expected, Country actual) {
        assertThat(actual)
            .as("Verify Country relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLocalName()).as("check localName").isEqualTo(expected.getLocalName()))
            .satisfies(a -> assertThat(a.getIso2()).as("check iso2").isEqualTo(expected.getIso2()))
            .satisfies(a -> assertThat(a.getIso3()).as("check iso3").isEqualTo(expected.getIso3()))
            .satisfies(a -> assertThat(a.getNumericCode()).as("check numericCode").isEqualTo(expected.getNumericCode()))
            .satisfies(a -> assertThat(a.getPhoneCode()).as("check phoneCode").isEqualTo(expected.getPhoneCode()))
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a -> assertThat(a.getCurrencyName()).as("check currencyName").isEqualTo(expected.getCurrencyName()))
            .satisfies(a -> assertThat(a.getCurrencySymbol()).as("check currencySymbol").isEqualTo(expected.getCurrencySymbol()))
            .satisfies(a -> assertThat(a.getEmoji()).as("check emoji").isEqualTo(expected.getEmoji()))
            .satisfies(a -> assertThat(a.getEmojiU()).as("check emojiU").isEqualTo(expected.getEmojiU()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCountryUpdatableRelationshipsEquals(Country expected, Country actual) {
        // empty method
    }
}
